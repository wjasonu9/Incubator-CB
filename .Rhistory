x[[1]]=1
x
rbind(1,c(1,2))
mkSeq=function(lo,up,len){
if(lo==up) return(rep(lo,len))
toBind=list()
for(j in lo:up) toBind[[j]]=rbind(j,mkSeq(j,up,len-1))
return do.call(what=cbind,args=toBind) }
mkSeq=function(lo,up,len){
if(lo==up) return(rep(lo,len))
toBind=list()
for(j in lo:up) toBind[[j]]=rbind(j,mkSeq(j,up,len-1))
return(do.call(what=cbind,args=toBind)) }
mkSeq(1,2,3)
mkSeq(1,2,2)
mkSeq=function(lo,up,len){
if(len<2) return(matrix(lo:up,ncol=1))
if(lo==up) return(rep(lo,len))
toBind=list()
for(j in lo:up) toBind[[j]]=rbind(j,mkSeq(j,up,len-1))
return(do.call(what=cbind,args=toBind)) }
mkSeq(1,2,3)
rbind(1,matrix(1:2,ncol=1))
mkSeq=function(lo,up,len){
if(len<2) return(matrix(lo:up,ncol=1))
if(lo==up) return(rep(lo,len))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
mkSeq(1,2,3)
mkSeq=function(lo,up,len){
if(lo==up) return(rep(lo,len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
mkSeq(1,2,3)
mkSeq(1,2,1)
mkSeq(1,2,2)
mkSeq(1,2,3)
cbind(1,mkSeq(1,2,2))
cbind(2,rep(2,2))
mkSeq=function(lo,up,len){
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
mkSeq(1,2,3)
mkSeq(1,3,3)
t=Sys.time()
x=mkSeq(1,4,4)
Sys.time()-t
t=Sys.time()
x=mkSeq(0,2,8)
Sys.time()-t
mkSeq=function(lo,up,len){
print(c(lo,up,len))
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
t=Sys.time()
x=mkSeq(0,2,8)
Sys.time()-t
mkSeq(0,2,1)
t=Sys.time()
x=mkSeq(1,3,8)
Sys.time()-t
View(x)
t=Sys.time()
x=mkSeq(1,4,8)
Sys.time()-t
mkSeq=function(lo,up,len){
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
View(x)
t=Sys.time()
x=mkSeq(1,5,8)
Sys.time()-t
x=mkSeq(1,6,8)
allPts=mkSeq(1,6,8)
Neighbors=function(x){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(y) }
z=y
y[j]=min(y[j]+1,6) #6=n/2
z[j]=z[j]-1
return(rbind(y,z)) }
toBind=lapply(1:8,N1,x) #d=8
return(do.call(rbind,toBind)) }
Neighbors(x[37,])
mkSeq=function(lo,up,len){ #all nondecr seqs w/ elements in {lo,...,up} of length len, for lo>0
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
findN=function(x,d,n){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(sort(y)) }
z=y
y[j]=min(y[j]+1,n/2)
z[j]=z[j]-1
return(rbind(sort(y),sort(z))) }
toBind=lapply(1:d,N1,x)
N_as_mat=do.call(rbind,toBind)
return(apply(N_as_mat,1,paste,collapse='')) }
findWt=function(x,d){
numOccur=table(x)
toMul=lapply(numOccur,factorial)
return(factorial(d)/do.call(prod,toMul)) }
d=8; n=12; m=n
range(sample(1:6,size=6,replace=T))
range(sample(1:6,size=6,replace=T))
range(sample(1:6,size=6,replace=T))
allPtsMat=mkSeq(1,n/2,d)
wtPts=apply(allPtsMat,1,findWt,d)
neighbors=apply(allPtsMat,1,findN,d,n)
allPts=apply(allPtsMat,1,paste,collapse='')
names(neighbors)=allPts
names(wtPts)=allPts
head(wtPts)
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
nPts=length(allPts)
updater=function(k,j){
pieces=mapply(getElement,name=neighbors[[k]],MoreArgs=list(object=numWalks),SIMPLIFY=F)
numWalks[[k]][j]<<-sum(sapply(pieces,'[',j-1)) }
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
numWalks[[1]]
as.character(numWalks[[1]][12])
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
t=Sys.time()
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
Sys.time()-t
numWalksM=sapply(numWalks,'[',m)
head(numWalksM)
rangeWalks=range(numWalksM)
rangeWalks
as.character(rangeWalks[2])
2^40
sd(1:3)
sd(1:3+1e15)
var(1:3+1e15)
sd
var
cov
sum(wtPts)
6^8
max(wtPts)
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
wtMeanSD(1:3+1e15,w=rep(1,3))
sqrt(2/3)
temp=wtMeanSD(1:3+1e15,w=rep(1,3))
as.character(temp[1])
identical(temp[1],1e15)
identical(temp[1],1e15+1)
identical(temp[1],1e15+2)
identical(temp[2],sqrt(2/3))
log2(1e15)
toCat=mapply(rep,x=numWalksM,times=wtPts)
walksRep=do.call(c,toCat)
sd(walksRep)
sd1=sd(walksRep)
as.character(sd1)
m1=mean(walksRep)
as.character(m1)
m1
temp=wtMeanSD(numWalksM,wtPts)
identical(temp[1],m1)
as.character(temp[2])
sd1*sqrt((6^8-1)/6^8)
as.character(sd1*sqrt((6^8-1)/6^8))
identical(temp[2],sd1*sqrt((6^8-1)/6^8))
'-'(temp[2],sd1*sqrt((6^8-1)/6^8))
print('Age: ',19)
paste(c('age: ','sex: ','loc: '),sep=1:3)
paste(c('age: ','sex: ','loc: '),collapse=1:3)
paste(c('age: ','sex: ','loc: '),1:3,collapse='')
paste(c('age:','sex:','loc:'),1:3,collapse=' ')
mkSeq=function(lo,up,len){ #all nondecr seqs w/ elements in {lo,...,up} of length len, for lo>0
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
findN=function(x,d,n){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(sort(y)) }
z=y
y[j]=min(y[j]+1,n/2)
z[j]=z[j]-1
return(rbind(sort(y),sort(z))) }
toBind=lapply(1:d,N1,x)
N_as_mat=do.call(rbind,toBind)
return(apply(N_as_mat,1,paste,collapse='')) }
findWt=function(x,d){
numOccur=table(x)
toMul=lapply(numOccur,factorial)
return(factorial(d)/do.call(prod,toMul)) }
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
doCounts=function(d,n,m){
allPtsMat=mkSeq(1,n/2,d)
wtPts=apply(allPtsMat,1,findWt,d)
neighbors=apply(allPtsMat,1,findN,d,n)
allPts=apply(allPtsMat,1,paste,collapse='')
names(neighbors)=allPts
names(wtPts)=allPts
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
nPts=length(allPts)
updater=function(k,j){
pieces=mapply(getElement,name=neighbors[[k]],MoreArgs=list(object=numWalks),SIMPLIFY=F)
numWalks[[k]][j]<<-sum(sapply(pieces,'[',j-1)) }
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
numWalksM=sapply(numWalks,'[',m)
numFromOri=numWalksM[1]
rangeWalks=range(numWalksM)
rangeRat=rangeWalks[2]/rangeWalks[1]
msd=wtMeanSD(numWalksM,wtPts)
msdRat=msd[2]/msd[1]
return(c(numFromOri,rangeRat,msdRat)) }
t=Sys.time()
x=doCounts(8,12,12)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ') %>% print()
Sys.time()-t
1 %>% print()
1 %>% print
pi %>% sin()
pi %>% sin
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
x[1]=x[1]*2^8
paste(c('num from any corner:','max/min:','sd/mean'),x,collapse=', ')
x[1]
x=doCounts(4,10,10)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
mkSeq=function(lo,up,len){ #all nondecr seqs w/ elements in {lo,...,up} of length len, for lo>0
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
findN=function(x,d,n){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(sort(y)) }
z=y
y[j]=min(y[j]+1,n/2)
z[j]=z[j]-1
return(rbind(sort(y),sort(z))) }
toBind=lapply(1:d,N1,x)
N_as_mat=do.call(rbind,toBind)
return(apply(N_as_mat,1,paste,collapse='')) }
findWt=function(x,d){
numOccur=table(x)
toMul=lapply(numOccur,factorial)
return(factorial(d)/do.call(prod,toMul)) }
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
doChal=function(d,n,m){
allPtsMat=mkSeq(1,n/2,d)
wtPts=apply(allPtsMat,1,findWt,d)
neighbors=apply(allPtsMat,1,findN,d,n)
allPts=apply(allPtsMat,1,paste,collapse='')
names(neighbors)=allPts
names(wtPts)=allPts
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
nPts=length(allPts)
updater=function(k,j){
pieces=mapply(getElement,name=neighbors[[k]],MoreArgs=list(object=numWalks),SIMPLIFY=F)
numWalks[[k]][j]<<-sum(sapply(pieces,'[',j-1)) }
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
numWalksM=sapply(numWalks,'[',m)
numFromOri=numWalksM[1]
rangeWalks=range(numWalksM)
rangeRat=rangeWalks[2]/rangeWalks[1]
msd=wtMeanSD(numWalksM,wtPts)
msdRat=msd[2]/msd[1]
return(c(numFromOri,rangeRat,msdRat)) }
x=doChal(4,10,10)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
x=doCounts(8,12,12)
x[1]=x[1]*2^8
paste(c('num from any corner:','max/min:','sd/mean'),x,collapse=', ')
mkSeq=function(lo,up,len){ #all nondecr seqs w/ elements in {lo,...,up} of length len, for lo>0
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
findN=function(x,d,n){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(sort(y)) }
z=y
y[j]=min(y[j]+1,n/2)
z[j]=z[j]-1
return(rbind(sort(y),sort(z))) }
toBind=lapply(1:d,N1,x)
N_as_mat=do.call(rbind,toBind)
return(apply(N_as_mat,1,paste,collapse='')) }
findWt=function(x,d){
numOccur=table(x)
toMul=lapply(numOccur,factorial)
return(factorial(d)/do.call(prod,toMul)) }
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
doChal=function(d,n,m){
allPtsMat=mkSeq(1,n/2,d)
wtPts=apply(allPtsMat,1,findWt,d)
neighbors=apply(allPtsMat,1,findN,d,n)
allPts=apply(allPtsMat,1,paste,collapse='')
names(neighbors)=allPts
names(wtPts)=allPts
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
nPts=length(allPts)
updater=function(k,j){
pieces=mapply(getElement,name=neighbors[[k]],MoreArgs=list(object=numWalks),SIMPLIFY=F)
numWalks[[k]][j]<<-sum(sapply(pieces,'[',j-1)) }
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
numWalksM=sapply(numWalks,'[',m)
numFromOri=numWalksM[1]
rangeWalks=range(numWalksM)
rangeRat=rangeWalks[2]/rangeWalks[1]
msd=wtMeanSD(numWalksM,wtPts)
msdRat=msd[2]/msd[1]
return(c(numFromOri,rangeRat,msdRat)) }
x=doChal(4,10,10)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
x=doChal(8,12,12)
x[1]=x[1]*2^8
paste(c('num from any corner:','max/min:','sd/mean'),x,collapse=', ')
n=1 #corresponds to n in notes
vecX=rbinom(n=1e5,size=n,prob=1/2)
hist(vecX)
ecdf(vecX)
plot(ecdf(vecX))
hist(vecX)
x=seq(from=0,to=n,by=0.1)
y=dnorm(x,mean=n/2,sd=sqrt(n/4))
points(x,y,col='red',type='l')
hist(vecX,density=T)
hist(vecX,freq=F)
x=seq(from=0,to=n,by=0.1)
y=dnorm(x,mean=n/2,sd=sqrt(n/4))
points(x,y,col='red',type='l')
n=10#corresponds to n in notes
vecX=rbinom(n=1e5,size=n,prob=1/2)
hist(vecX,freq=F)
x=seq(from=0,to=n,by=0.1)
y=dnorm(x,mean=n/2,sd=sqrt(n/4))
points(x,y,col='red',type='l')
n=20 #corresponds to n in notes
vecX=rbinom(n=1e5,size=n,prob=1/2)
hist(vecX,freq=F)
x=seq(from=0,to=n,by=0.1)
y=dnorm(x,mean=n/2,sd=sqrt(n/4))
points(x,y,col='red',type='l')
plot(ecdf(vecX))
y=pnorm(x,mean=n/2,sd=sqrt(n/4))
points(x,y,col='red',type='l')
n=3 #corresponds to n in notes
vecX=rbinom(n=1e5,size=n,prob=1/2)
hist(vecX,freq=F)
x=seq(from=0,to=n,by=0.1)
y=dnorm(x,mean=n/2,sd=sqrt(n/4))
points(x,y,col='red',type='l')
plot(ecdf(vecX))
y=pnorm(x,mean=n/2,sd=sqrt(n/4))
points(x,y,col='red',type='l')
n=3 #corresponds to n in notes
vecX=sample(x=1:n,size=1e5,replace=T)/n
hist(vecX,freq=F)
hist(vecX,freq=F,xlim=c(0,1))
abline(a=1,b=0,col='red')
plot(ecdf(vecX))
abline(a=0,b=1,col='red')
n=10 #corresponds to n in notes
vecX=sample(x=1:n,size=1e5,replace=T)/n
hist(vecX,freq=F,xlim=c(0,1))
abline(a=1,b=0,col='red')
plot(ecdf(vecX))
abline(a=0,b=1,col='red')
setwd('Downloads/Recent/Incubator-CB')
us[1,1]
load('CBdat.RData')
us[1,1]
us[1,2]
us=us %>% mutate(loc=tolower(paste(asciiname,admin1))) %>% select(loc,latitude,longitude)
library(dplyr)
us=us %>% mutate(loc=tolower(paste(asciiname,admin1))) %>% select(loc,latitude,longitude)
head(us)
which(us$loc=='washington dc')
which(us$loc=='indianola ia')
which(us$loc=='norwalk ia')
grep('washington',us$loc)
temp=slice(us,grep('washington',loc))
View(temp)
head(wCB)
temp=us %>% filter(loc=='kenya') %>% slice(1)
temp
exists('target')
exists('entry')
nrow(temp)
exists('dista')
sqDist=function(lat1,long1,lat2=34.050536,long2=-118.247861){ #lat2,long2 are for Washington, DC (Wikipedia) by default
d1=(lat2-lat1)*6371*pi/180
d2=cos((lat1+lat2)*pi/90)*(long2-long1)*6371*pi/180
return(d1^2+d2^2) }
getDist=function(homet){
if(homet=='washington dc') return(0)
entry=us %>% filter(loc==homet) %>% slice(1)
if(nrow(entry)<1) return(NA)
return(sqDist(entry[2],entry[3]) %>% sqrt) }
mCB=mutate(mCB,dista=getDist(home))
head(mCB)
mCB[sample(26429,size=7),]
temp=us %>% filter(loc=='south riding va') %>% slice(1)
temp
temp=mCB[sample(26429,size=7),]
mutate(temp,dista=getDist(home))
add2=function(x) x+2
mutate(temp,newage=add2(age))
mCB=mCB[,-7]
mCB=mutate(mCB,dista=Vectorize(getDist)(home))
temp=mCB[sample(26429,size=1e3),]
t=Sys.time()
temp=mutate(temp,dista=Vectorize(getDist)(home))
Sys.time()-t
head(temp)
getDist('vienna va')
filter(us,loc=='vienna va')
sqDist(38.90122,-77.26526) %>% sqrt
sqDist(38.90122,-77.26526)
sqDist=function(lat1,long1,lat2=38.904722,long2=-77.016389){ #lat2,long2 are for Washington, DC (Wikipedia) by default
d1=(lat2-lat1)*6371*pi/180
d2=cos((lat1+lat2)*pi/90)*(long2-long1)*6371*pi/180
return(d1^2+d2^2) }
summary(temp)
which(is.na(temp$dista))
ny=slice(us,grep('new york',loc))
ny
slice(mCB,grep('new york',home)) %>% nrow
slice(wCB,grep('new york',home)) %>% nrow
sqDist(40.661,-73.944) %<% sqrt
sqDist(40.661,-73.944) %>% sqrt
ny=slice(us,grep('bloomfield',loc))
ny
temp=mCB[sample(26429,size=1e3),]
temp=mutate(temp,dista=Vectorize(getDist)(home))
which(is.na(temp$dista))
getDist=function(homet){
if(homet=='washington dc') return(0)
if(homet=='new york ny') return(374)
entry=us %>% filter(loc==homet) %>% slice(1)
if(nrow(entry)<1) return(NA)
return(sqDist(entry[2],entry[3]) %>% sqrt) }
temp=mCB[sample(26429,size=1e3),]
temp=mutate(temp,dista=Vectorize(getDist)(home))
which(is.na(temp$dista))
getDist=function(homet){
if(grepl('washington dc',homet)) return(0)
if(homet=='new york ny') return(374)
entry=us %>% filter(loc==homet) %>% slice(1)
if(nrow(entry)<1) return(NA)
return(sqDist(entry[2],entry[3]) %>% sqrt) }
temp=mCB[sample(26429,size=1e3),]
temp=mutate(temp,dista=Vectorize(getDist)(home))
which(is.na(temp$dista))
ny=slice(us,grep('louis',loc))
View(ny)
t=Sys.time()
mCB=mutate(mCB,dista=Vectorize(getDist)(home))
wCB=mutate(wCB,dista=Vectorize(getDist)(home))
Sys.time()-t
summary(mCB)
summary(wCB)
save(mCB,wCB,us,file='CBdat.RData')
