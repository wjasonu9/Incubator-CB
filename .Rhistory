as.character(rangeWalks[2])
2^40
sd(1:3)
sd(1:3+1e15)
var(1:3+1e15)
sd
var
cov
sum(wtPts)
6^8
max(wtPts)
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
wtMeanSD(1:3+1e15,w=rep(1,3))
sqrt(2/3)
temp=wtMeanSD(1:3+1e15,w=rep(1,3))
as.character(temp[1])
identical(temp[1],1e15)
identical(temp[1],1e15+1)
identical(temp[1],1e15+2)
identical(temp[2],sqrt(2/3))
log2(1e15)
toCat=mapply(rep,x=numWalksM,times=wtPts)
walksRep=do.call(c,toCat)
sd(walksRep)
sd1=sd(walksRep)
as.character(sd1)
m1=mean(walksRep)
as.character(m1)
m1
temp=wtMeanSD(numWalksM,wtPts)
identical(temp[1],m1)
as.character(temp[2])
sd1*sqrt((6^8-1)/6^8)
as.character(sd1*sqrt((6^8-1)/6^8))
identical(temp[2],sd1*sqrt((6^8-1)/6^8))
'-'(temp[2],sd1*sqrt((6^8-1)/6^8))
print('Age: ',19)
paste(c('age: ','sex: ','loc: '),sep=1:3)
paste(c('age: ','sex: ','loc: '),collapse=1:3)
paste(c('age: ','sex: ','loc: '),1:3,collapse='')
paste(c('age:','sex:','loc:'),1:3,collapse=' ')
mkSeq=function(lo,up,len){ #all nondecr seqs w/ elements in {lo,...,up} of length len, for lo>0
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
findN=function(x,d,n){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(sort(y)) }
z=y
y[j]=min(y[j]+1,n/2)
z[j]=z[j]-1
return(rbind(sort(y),sort(z))) }
toBind=lapply(1:d,N1,x)
N_as_mat=do.call(rbind,toBind)
return(apply(N_as_mat,1,paste,collapse='')) }
findWt=function(x,d){
numOccur=table(x)
toMul=lapply(numOccur,factorial)
return(factorial(d)/do.call(prod,toMul)) }
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
doCounts=function(d,n,m){
allPtsMat=mkSeq(1,n/2,d)
wtPts=apply(allPtsMat,1,findWt,d)
neighbors=apply(allPtsMat,1,findN,d,n)
allPts=apply(allPtsMat,1,paste,collapse='')
names(neighbors)=allPts
names(wtPts)=allPts
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
nPts=length(allPts)
updater=function(k,j){
pieces=mapply(getElement,name=neighbors[[k]],MoreArgs=list(object=numWalks),SIMPLIFY=F)
numWalks[[k]][j]<<-sum(sapply(pieces,'[',j-1)) }
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
numWalksM=sapply(numWalks,'[',m)
numFromOri=numWalksM[1]
rangeWalks=range(numWalksM)
rangeRat=rangeWalks[2]/rangeWalks[1]
msd=wtMeanSD(numWalksM,wtPts)
msdRat=msd[2]/msd[1]
return(c(numFromOri,rangeRat,msdRat)) }
t=Sys.time()
x=doCounts(8,12,12)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ') %>% print()
Sys.time()-t
1 %>% print()
1 %>% print
pi %>% sin()
pi %>% sin
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
x[1]=x[1]*2^8
paste(c('num from any corner:','max/min:','sd/mean'),x,collapse=', ')
x[1]
x=doCounts(4,10,10)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
mkSeq=function(lo,up,len){ #all nondecr seqs w/ elements in {lo,...,up} of length len, for lo>0
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
findN=function(x,d,n){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(sort(y)) }
z=y
y[j]=min(y[j]+1,n/2)
z[j]=z[j]-1
return(rbind(sort(y),sort(z))) }
toBind=lapply(1:d,N1,x)
N_as_mat=do.call(rbind,toBind)
return(apply(N_as_mat,1,paste,collapse='')) }
findWt=function(x,d){
numOccur=table(x)
toMul=lapply(numOccur,factorial)
return(factorial(d)/do.call(prod,toMul)) }
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
doChal=function(d,n,m){
allPtsMat=mkSeq(1,n/2,d)
wtPts=apply(allPtsMat,1,findWt,d)
neighbors=apply(allPtsMat,1,findN,d,n)
allPts=apply(allPtsMat,1,paste,collapse='')
names(neighbors)=allPts
names(wtPts)=allPts
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
nPts=length(allPts)
updater=function(k,j){
pieces=mapply(getElement,name=neighbors[[k]],MoreArgs=list(object=numWalks),SIMPLIFY=F)
numWalks[[k]][j]<<-sum(sapply(pieces,'[',j-1)) }
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
numWalksM=sapply(numWalks,'[',m)
numFromOri=numWalksM[1]
rangeWalks=range(numWalksM)
rangeRat=rangeWalks[2]/rangeWalks[1]
msd=wtMeanSD(numWalksM,wtPts)
msdRat=msd[2]/msd[1]
return(c(numFromOri,rangeRat,msdRat)) }
x=doChal(4,10,10)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
x=doCounts(8,12,12)
x[1]=x[1]*2^8
paste(c('num from any corner:','max/min:','sd/mean'),x,collapse=', ')
mkSeq=function(lo,up,len){ #all nondecr seqs w/ elements in {lo,...,up} of length len, for lo>0
if(lo==up) return(matrix(lo,nrow=1,ncol=len))
if(len<2) return(matrix(lo:up,ncol=1))
toBind=list()
for(j in lo:up) toBind[[j]]=cbind(j,mkSeq(j,up,len-1))
return(do.call(what=rbind,args=toBind)) }
findN=function(x,d,n){
N1=function(j,y){
if(y[j]<2){
y[j]=y[j]+1
return(sort(y)) }
z=y
y[j]=min(y[j]+1,n/2)
z[j]=z[j]-1
return(rbind(sort(y),sort(z))) }
toBind=lapply(1:d,N1,x)
N_as_mat=do.call(rbind,toBind)
return(apply(N_as_mat,1,paste,collapse='')) }
findWt=function(x,d){
numOccur=table(x)
toMul=lapply(numOccur,factorial)
return(factorial(d)/do.call(prod,toMul)) }
wtMeanSD=function(x,w){
k=floor(log2(x[1]))
x=x/2^k
wtM=weighted.mean(x,w)
wtV=sum(w*(x-wtM)^2)/sum(w)
return(c(wtM,sqrt(wtV))*2^k) }
doChal=function(d,n,m){
allPtsMat=mkSeq(1,n/2,d)
wtPts=apply(allPtsMat,1,findWt,d)
neighbors=apply(allPtsMat,1,findN,d,n)
allPts=apply(allPtsMat,1,paste,collapse='')
names(neighbors)=allPts
names(wtPts)=allPts
numWalks=lapply(neighbors,length)
numWalks=lapply(numWalks,as.double)
nPts=length(allPts)
updater=function(k,j){
pieces=mapply(getElement,name=neighbors[[k]],MoreArgs=list(object=numWalks),SIMPLIFY=F)
numWalks[[k]][j]<<-sum(sapply(pieces,'[',j-1)) }
for(j in 2:m) invisible(lapply(1:nPts,updater,j))
numWalksM=sapply(numWalks,'[',m)
numFromOri=numWalksM[1]
rangeWalks=range(numWalksM)
rangeRat=rangeWalks[2]/rangeWalks[1]
msd=wtMeanSD(numWalksM,wtPts)
msdRat=msd[2]/msd[1]
return(c(numFromOri,rangeRat,msdRat)) }
x=doChal(4,10,10)
paste(c('num from origin:','max/min:','sd/mean'),x,collapse=', ')
x=doChal(8,12,12)
x[1]=x[1]*2^8
paste(c('num from any corner:','max/min:','sd/mean'),x,collapse=', ')
library('XML')
setwd('Downloads/Recent')
yr=substr(as.character(1999:2012),3,4)
mFiles=paste('cb',yr,'-m.txt',sep='')
mFiles
source('IncubatorChal-CB.R')
ubase='http://www.cherryblossom.org/results/'
source('IncubatorChal-CB.R')
setwd('CBdata-Incubator')
allEls=allEls[c(1,26,2:9,28,10:13,27,14:25)]
save(allEls,file='CherryBlossom.RData')
x=rnorm(10); y=x
data.frame(x,y)
source('IncubatorChal-CB.R')
getwd()
clean06(allEls[[7]][9])
allEls[[7]][9:5243]=sapply(allEls[[7]][9:5243],clean06,USE.NAMES=F)
clean06(allEls[[7]][5243])
length(allEls[[7]])
head(allEls[[7]])
source('IncubatorChal-CB.R')
yr=substr(as.character(1999:2012),3,4)
mFileNames=paste('CBdatasets/cb',yr,'-m.txt',sep='')
wFileNames=paste('CBdatasets/cb',yr,'-w.txt',sep='')
names(allEls)=substr(c(mFileNames,wFileNames),12,17)
getwd()
mapply(FUN=writeLines,text=allEls,con=c(mFileNames,wFileNames))
mFileNames=paste('cb',yr,'-m.txt',sep='')
wFileNames=paste('cb',yr,'-w.txt',sep='')
names(allEls)=substr(c(mFileNames,wFileNames),12,17)
mapply(FUN=writeLines,text=allEls,con=c(mFileNames,wFileNames))
save(allEls,file='CherryBlossom.RData')
shortCols=c('name','home','ag','gun','net','time','5 mi')
extractVars=function(fi){
findColLocs=function(spRow){
spLocs=gregexpr(' ',spRow)[[1]]
rowLen=nchar(spRow)
if(substring(text=spRow,first=rowLen)!=' ')
return(c(0,spLocs,rowLen+1))
else return(c(0,spLocs)) }
selectCols=function(colNames,hdRow,schLocs){
helper=function(name){
startPos=regexpr(name,hdRow)[[1]]
if(startPos==-1) return(c(NA,NA))
ind=sum(startPos>=schLocs)
c(schLocs[ind]+1,schLocs[ind+1]-1) }
sapply(colNames,helper) }
els=readLines(fi)
eqI=grep(pattern='^=',x=els)
spRow=els[eqI]; hdRow=tolower(els[eqI-1]); body=els[-(1:eqI)]
locCol=selectCols(shortCols,hdRow,findColLocs(spRow))
Values=mapply(substr,x=list(body),start=locCol[1,],stop=locCol[2,])
colnames(Values)=shortCols
invisible(Values) }
createDF=function(Res,year){
convertTime=function(x){
Spcs=strsplit(x,split=':')
pcs=sapply(Spcs,as.numeric)
helper=function(y){
if(length(y)==2) y[1]+y[2]/60
else 60*y[1]+y[2]+y[3]/60 }
sapply(pcs,helper,USE.NAMES=F) }
useTime=if(!is.na(Res[1,'net'])) Res[,'net']
else if(!is.na(Res[1,'gun'])) Res[,'gun']
else Res[,'time']
ind=grep(pattern='\\d',x=useTime)
Res=Res[ind,]
runTime=convertTime(useTime[ind])
halfTime=convertTime(Res[,'5 mi'])
Results=data.frame(year=rep(year,nrow(Res)),name=Res[,'name'],home=Res[,'home'],age=as.numeric(Res[,'ag']),halfTime,runTime,stringsAsFactors=F)
invisible(Results) }
mResMat=lapply(mFileNames,extractVars)
wResMat=lapply(wFileNames,extractVars)
mDF=mapply(FUN=createDF,Res=mResMat,year=1999:2012,SIMPLIFY=F); wDF=mapply(FUN=createDF,Res=wResMat,year=1999:2012,SIMPLIFY=F)
mCB=do.call(rbind,mDF); wCB=do.call(rbind,wDF)
warnings()
summary(mDF)
summary(mCB)
which(mCB$halfTime<15)
mCB[48998,]
which(mCB$halfTime<20)
head(which(is.na(mCB$runTime)))
mCB[25917,]
sum(mCB$year==2006)
source('IncubatorChal-CB.R')
summary(mCB)
hist(mCB$halfTime)
hist(mCB$runTime)
which(mCB$runTime<40)
summary(wCB)
which(wCB$halftime<20)
which(wCB$halfTime<20)
wCB[67572,]
wCB[67562,]
library(dplyr)
mCB=filter(mCB,!is.na(halfTime) & halfTime>20 & runTime>40)
summary(mCB)
sum(mCB$age<15)
sum(mCB$age<15,na.rm=T)
sum(mCB$age<10,na.rm=T)
which(mCB$age<10)
mCB[18037,]
mCB[24535,]
load('CherryBlossom.RData')
shortCols=c('name','home','ag','gun','net','time','5 mi')
extractVars=function(fi){
findColLocs=function(spRow){
spLocs=gregexpr(' ',spRow)[[1]]
rowLen=nchar(spRow)
if(substring(text=spRow,first=rowLen)!=' ')
return(c(0,spLocs,rowLen+1))
else return(c(0,spLocs)) }
selectCols=function(colNames,hdRow,schLocs){
helper=function(name){
startPos=regexpr(name,hdRow)[[1]]
if(startPos==-1) return(c(NA,NA))
ind=sum(startPos>=schLocs)
c(schLocs[ind]+1,schLocs[ind+1]-1) }
sapply(colNames,helper) }
els=readLines(fi)
eqI=grep(pattern='^=',x=els)
spRow=els[eqI]; hdRow=tolower(els[eqI-1]); body=els[-(1:eqI)]
locCol=selectCols(shortCols,hdRow,findColLocs(spRow))
Values=mapply(substr,x=list(body),start=locCol[1,],stop=locCol[2,])
colnames(Values)=shortCols
invisible(Values) }
createDF=function(Res,year){
convertTime=function(x){
Spcs=strsplit(x,split=':')
pcs=sapply(Spcs,as.numeric)
helper=function(y){
if(length(y)==2) y[1]+y[2]/60
else 60*y[1]+y[2]+y[3]/60 }
sapply(pcs,helper,USE.NAMES=F) }
useTime=if(!is.na(Res[1,'net'])) Res[,'net']
else if(!is.na(Res[1,'gun'])) Res[,'gun']
else Res[,'time']
ind=grep(pattern='\\d',x=useTime)
Res=Res[ind,]
runTime=convertTime(useTime[ind])
halfTime=convertTime(Res[,'5 mi'])
Results=data.frame(year=rep(year,nrow(Res)),name=Res[,'name'],home=Res[,'home'],age=as.numeric(Res[,'ag']),halfTime,runTime,stringsAsFactors=F)
invisible(Results) }
mResMat=lapply(mFileNames,extractVars)
wResMat=lapply(wFileNames,extractVars)
mDF=mapply(FUN=createDF,Res=mResMat,year=1999:2012,SIMPLIFY=F); wDF=mapply(FUN=createDF,Res=wResMat,year=1999:2012,SIMPLIFY=F)
mCB=do.call(rbind,mDF); wCB=do.call(rbind,wDF)
yr=substr(as.character(1999:2012),3,4)
mFileNames=paste('cb',yr,'-m.txt',sep='')
wFileNames=paste('cb',yr,'-w.txt',sep='')
mResMat=lapply(mFileNames,extractVars)
wResMat=lapply(wFileNames,extractVars)
mDF=mapply(FUN=createDF,Res=mResMat,year=1999:2012,SIMPLIFY=F); wDF=mapply(FUN=createDF,Res=wResMat,year=1999:2012,SIMPLIFY=F)
mCB=do.call(rbind,mDF); wCB=do.call(rbind,wDF)
summary(mCB)
which(is.na(mCB$age))
mCB[1083,]
which(mCB$runTime<40)
mCB[8456,]
mCB=na.omit(mCB) %>% filter(halfTime>20)
wCB=na.omit(wCB) %>% filter(halfTime>20)
summary(mCB)
summary(wCB)
smoothScatter(mCB$halfTime,mCB$runTime)
abline(a=0,b=2)
grep('Harrington',mCB$name)
mCB[grep('Harrington',mCB$name),]
smoothScatter(wCB$halfTime,wCB$runTime,colramp=alRamp('white','red'))
alRamp=function(c1,c2,alpha=128){
stopifnot(alpha>=0 & alpha<=256)
function(n) paste(colorRampPalette(c(c1,c2))(n),format(as.hexmode(alpha),upper.case=T),sep="") }
smoothScatter(wCB$halfTime,wCB$runTime,colramp=alRamp('white','red'))
par(new=T)
smoothScatter(mCB$halfTime,wCB$halfTime,colramp=alRamp('white','blue'),axes=F,ann=F)
smoothScatter(mCB$halfTime,mCB$halfTime,colramp=alRamp('white','blue'),axes=F,ann=F)
smoothScatter(wCB$halfTime,wCB$runTime,colramp=alRamp('white','red'),col='red')
par(new=T)
smoothScatter(mCB$halfTime,mCB$halfTime,colramp=alRamp('white','blue'),col='blue',axes=F,ann=F)
smoothScatter(wCB$halfTime,wCB$runTime,colramp=alRamp('white','red'),col='red')
par(new=T)
smoothScatter(mCB$halfTime,mCB$runTime,colramp=alRamp('white','blue'),col='blue',axes=F,ann=F)
abline(a=0,b=2)
mean(mCB$runTime<2*mCB$halfTime)
mean(wCB$runTime<2*wCB$halfTime)
plot(mCB$halfTime,mCB$runTime,col=mCB$age)
exists('home')
temp=head(mCB$home)
mch=regexpr('\\w+$',temp)
regmatches(home,mch)
regmatches(temp,mch)
temp
mCB=do.call(rbind,mDF); wCB=do.call(rbind,wDF)
ReviseStr=function(x){
x=tolower(x)
x=gsub(pattern='^\\s+|\\s+$|[.,/]',replacement='',x)
x=gsub(pattern='\\s+',replacement=' ',x)
return(x) }
mCB$home=ReviseStr(mCB$home)
wCB$home=ReviseStr(wCB$home)
head(mCB)
mCB=na.omit(mCB) %>% filter(halfTime>20)
wCB=na.omit(wCB) %>% filter(halfTime>20)
temp=head(mCB$home)
mch=regexpr('\\w+$',temp)
regmatches(temp,mch)
View(mCB)
temp=head(mCB$home,12)
mch=regexpr('\\w+$',temp)
regmatches(temp,mch)
mCB=mutate(mCB,state=getState(home))
getState=function(home){
mch=regexpr('\\w+$',home)
return(regmatches(home,m=mch)) }
mCB=mutate(mCB,state=getState(home))
temp=c(head(mCB$home,12),'')
mch=regexpr('\\w+$',temp)
regmatches(temp,mch)
regexpr('\\w+$','')
mCB=do.call(rbind,mDF); wCB=do.call(rbind,wDF)
mCB$home=ReviseStr(mCB$home)
wCB$home=ReviseStr(wCB$home)
mCB=na.omit(mCB) %>% filter(grepl('\\w+$',home) & halfTime>20)
wCB=na.omit(wCB) %>% filter(grepl('\\w+$',home) & halfTime>20)
mCB=mutate(mCB,state=getState(home))
wCB=mutate(wCB,state=getState(home))
unique(mCB$state)
which(mCB$state=='ae')
mCB[15834,]
which(mCB$state=='ap')
mCB[23626,]
exists('where')
catState=function(state){
if(state %in% c('dc','md','va')) return('close')
if(length(state)<3) return('us-far')
return('intl') }
mCB$where=factor(sapply(mCB$state,catState))
wCB$where=factor(sapply(wCB$state,catState))
summary(mCB)
head(mCB)
catState=function(state){
if(state %in% c('dc','md','va')) return('close')
if(nchar(state)<3) return('us-far')
return('intl') }
mCB$where=factor(sapply(mCB$state,catState))
wCB$where=factor(sapply(wCB$state,catState))
summary(mCB)
sum(mCB$state=='kenya')
sum(mCB$state=='ethiopia')
summary(wCB)
filter(wCB,halfTime>90)
filter(wCB,runTime>170)
filter(wCB,where=='close') %>% select(halfTime,runTime) %>% smoothScatter(colramp=alRamp('white','blue'),col='blue',nrpoints=270)
par(new=T)
filter(wCB,where=='us-far') %>% select(halfTime,runTime) %>% smoothScatter(colramp=alRamp('white','green'),col='green',nrpoints=60,axes=F,ann=F)
abline(a=0,b=2)
exists('prop')
group_by(wCB,where) %>% summarize(prop=mean(runTime<2*halfTime))
legend('topleft',col=c('blue','green'),legend=c('DC/MD/VA','US: other'),bty='n')
legend('topleft',fill=c('blue','green'),legend=c('DC/MD/VA','US: other'),bty='n')
filter(wCB,where=='close') %>% select(halfTime,runTime) %>% smoothScatter(colramp=alRamp('white','blue'),col='blue',nrpoints=270,xlab='5 mile time',ylab='10 mile time')
par(new=T)
filter(wCB,where=='us-far') %>% select(halfTime,runTime) %>% smoothScatter(colramp=alRamp('white','green'),col='green',nrpoints=60,axes=F,ann=F)
abline(a=0,b=2)
legend('topleft',fill=c('blue','green'),legend=c('DC/MD/VA','US: other'),bty='n')
library("fields", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
exists('ratio')
names(wCB)
AgeTime=as.matrix(wCB[,c(4,6)])
exists('viz')
AgeTime=as.matrix(wCB[,c(4,6)])
TpsMod=Tps(x=AgeTime,Y=wCB$runTime/wCB$halfTime)
ind=sample(1:33573,size=1e3)
AgeTime=as.matrix(wCB[ind,c(4,6)])
ratio=wCB$runTime/wCB$halfTime; ratio=ratio[ind]
TpsMod=Tps(x=AgeTime,Y=ratio)
viz=predictSurface(TpsMod)
plot.surface(viz,type='C')
ind=sample(1:33573,size=2e3)
AgeTime=as.matrix(wCB[ind,c(4,6)])
ratio=wCB$runTime/wCB$halfTime; ratio=ratio[ind]
TpsMod=Tps(x=AgeTime,Y=ratio)
viz=predictSurface(TpsMod)
plot.surface(viz,type='C')
set.seed(1)
ind=sample(1:33573,size=2e3)
AgeTime=as.matrix(wCB[ind,c(4,6)])
ratio=wCB$runTime/wCB$halfTime; ratio=ratio[ind]
TpsMod=Tps(x=AgeTime,Y=ratio)
viz=predictSurface(TpsMod)
plot.surface(viz,type='C')
filter(wCB,where=='close') %>% select(halfTime,runTime) %>% smoothScatter(colramp=alRamp('white','blue'),col='blue',nrpoints=270,xlab='5 mile time',ylab='10 mile time')
par(new=T)
filter(wCB,where=='us-far') %>% select(halfTime,runTime) %>% smoothScatter(colramp=alRamp('white','green'),col='green',nrpoints=60,axes=F,ann=F)
points(runTime~halfTime,data=wCB,subset=where=='intl',col='red',pch=16,cex=0.2)
title(main='10 vs 5 mile time by location')
